import numpy as np
import csv


class ClassificationScoreMatrix(object):

    def __init__(self, labels):
        """
        ClassificationScoreMatrix that holds classification results from a classifier
        :param labels: The possible labels of the classifier
        """
        self._labels = labels  # list of all the class names
        self._classifications = []  # list of Tuples containing the ground truth and the score per label
        print "Classes used by the classifier: {}".format(self._labels)

    @property
    def labels(self):
        return self._labels

    @property
    def classifications_ground_truth(self):
        """
        List of ground truths per detection
        """
        return [classification[0] for classification in self._classifications]

    @property
    def classifications_scores(self):
        """
        Numpy matrix of scores per label per classification
        """
        return np.array([classification[1] for classification in self._classifications])

    @staticmethod
    def from_file(csv_filename):
        """
        Reads a classification score matrix generated by one one of the classifiers.
        :param csv_filename: The csv filename
        :return: a classification score matrix constructed from the csv_file
        """
        with open(csv_filename, 'r') as f:
            reader = csv.reader(f)

            header_row = reader.next()
            classification_score_matrix = ClassificationScoreMatrix(header_row[1:]) # First column is the ground truth

            for row in reader:
                classification_score_matrix.add_classification(row[0], row[1:])

        return classification_score_matrix

    def add_classification(self, ground_truth, scores):
        """
        Add a classification to the matrix (together with the ground truth)
        :param ground_truth: Ground truth label, should exist in the labels
        :param scores: Score per label for this classification, lenght should be the same as the number of labels
        :return: match (correct classification), best_label, best_score
        """
        if ground_truth not in self._labels:
            raise ValueError("Found ground truth label '{}' but this label is not present in the Classifier labels: {}"
                             .format(ground_truth, self._labels))

        if len(scores) != len(self._labels):
            raise ValueError("Classification added with len(scores) != len(labels), incorrect input")

        self._classifications.append((ground_truth, scores))

        sorted_labels_scores = sorted(zip(self._labels, scores), key=lambda x: x[1], reverse=True)
        return sorted_labels_scores[0][0] == ground_truth, sorted_labels_scores[0][0], sorted_labels_scores[0][1]

    def write_to_file(self, csv_filename):
        """
        Write the classification score matrix instance to a file
        :param csv_filename: The csv filename
        """
        with open(csv_filename, 'w+') as f:
            writer = csv.DictWriter(f, fieldnames=["ground_truth"] + self._labels)
            writer.writeheader()

            for ground_truth, scores in self._classifications:
                row = dict({'ground_truth': ground_truth}, **dict(scores))
                writer.writerow(row)
