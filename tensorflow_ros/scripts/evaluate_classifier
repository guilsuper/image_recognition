#!/usr/bin/env python

"""Evaluate a given classifier against a directory of annotated images.
The script will output a .csv that can be evaluated. """

import argparse

from tensorflow_ros.object_recognizer import ObjectRecognizer
from image_recognition_util.image_reader import read_annotated
from image_recognition_util.classification_score_matrix import ClassificationScoreMatrix

# Assign description to the help doc
parser = argparse.ArgumentParser(description='Evaluate the classification performance of a TensorFlow network')

# Add arguments
parser.add_argument('graph_path', type=str, help='Path to a trained TensorFlow output_graph.pb network')
parser.add_argument('labels_path', type=str, help='Path to a file with the output labels, eg. output_labels.txt')
parser.add_argument('annotated_dir', type=str, help='Use a the given directory (which must have subdirs for each class)'
                                                    ' and use the annotations to get some metrics about the classifier')
parser.add_argument('-n', '--top_n', type=int, help='Top N results to display', default=1)
parser.add_argument('--input-tensor', type=str, help='Tensor name of input image',  default="Cast:0")
parser.add_argument('--output-tensor', type=str, help='Tensor name of classifications label', default="final_result:0")
parser.add_argument('-o', '--output', type=str, help='Classification result output csv. First column is ground truth '
                                                     'label, other columns are the class scores', default="result.csv")

args = parser.parse_args()

object_recognizer = ObjectRecognizer(args.graph_path, args.labels_path, args.input_tensor, args.output_tensor)

classification_score_matrix = ClassificationScoreMatrix(object_recognizer.labels)

print ">> Evaluating classified with labels: {}".format(object_recognizer.labels)

matches = []
for label, image, filename in read_annotated(args.annotated_dir):
    if label not in object_recognizer.labels:
        print ">> Skipping image with label '{}', label not present in classifier".format(label)
        continue

    scores = object_recognizer.classify(image)
    match, best_label, best_score = classification_score_matrix.add_classification(label, scores)

    matches.append(match)
    print "{}({}/{})\t{}\t{} classified as {} ({:.3f})\033[0m".format("\033[92m" if match else "\033[91m",
                                                                      matches.count(True), len(matches),
                                                                      filename, label, best_label, best_score)

classification_score_matrix.write_to_file(args.output)

print ">> Final accuracy: {}".format(float(matches.count(True)) / len(matches))
